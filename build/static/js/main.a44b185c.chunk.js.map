{"version":3,"sources":["components/Card.js","components/CardList.js","components/robots.js","components/SearchBox.js","components/Scroll.js","conteiners/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardArray","map","user","i","key","username","SearchBox","searchfielf","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","this","filteredRobots","filter","robot","toLowerCase","includes","length","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sNAkBeA,EAhBD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACG,yBAAKC,UAAW,uDACZ,yBAAKC,IAAG,+BAA0BF,EAA1B,aAAyCG,IAAI,WACrD,6BACI,4BAAKL,GACJ,2BAAIC,MCaNK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAYD,EAAOE,KAAI,SAACC,EAAMC,GAC/B,OACA,kBAAC,EAAD,CAAMC,IAAKD,EACET,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAQM,EAAOI,GAAGV,WAIpC,OACA,6BACOO,ICfED,EAAS,CAClB,CACEL,GAAI,EACJF,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNa,SAAU,iBACVZ,MAAO,0BAET,CACEC,GAAI,GACJF,KAAM,sBACNa,SAAU,QACVZ,MAAO,oBAET,CACEC,GAAI,GACJF,KAAM,WACNa,SAAU,QACVZ,MAAO,uBCxDEa,EAZG,SAAC,GAAiC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC9B,OACI,yBAAKb,UAAU,OACX,2BACAA,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAWH,MCIRI,EAXA,SAACC,GACf,OACG,yBAAKC,MAAQ,CAACC,UAAW,SAAUC,OAAO,kBAAmBC,OAAQ,UAChEJ,EAAMK,WC6BAC,E,YA5BX,aAAe,IAAD,8BACV,+CAMJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAN1C,EAAKC,MAAQ,CACT3B,OAAQA,EACRwB,YAAa,IAJP,E,sEAWH,IAAD,EAC0BI,KAAKD,MAA7B3B,EADF,EACEA,OAAQwB,EADV,EACUA,YACVK,EAAgB7B,EAAO8B,QAAO,SAAAC,GAChC,OAAOA,EAAMtC,KAAKuC,cAAcC,SAAST,EAAYQ,kBAE1D,OAAQhC,EAAOkC,OAEX,yBAAKtC,UAAU,MACL,wBAAImB,MAAQ,CAACoB,MAAO,UAApB,eACA,kBAAC,EAAD,CAAW1B,aAAcmB,KAAKP,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,CAAUrB,OAAQ6B,MAL/B,kD,GAlBOO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a44b185c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card =  ({ name, email, id }) => {\n     return (\n        <div className= \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}*?200x200`} alt='robots'/>   \n            <div>\n                <h2>{name}</h2>\n                 <p>{email}</p>\n            </div>\n\n\n\n        </div>\n\n    );\n}\n\nexport default Card","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    const cardArray = robots.map((user, i) => {\n         return (\n         <Card key={i} \n                      id={robots[i].id} \n                      name={robots[i].name} \n                      email= {robots[i].email}\n                      />\n            );\n        })\n    return(\n    <div>\n          {cardArray}              \n\n    </div>\n  );\n}\n\nexport default CardList;","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    },\n    {\n      id: 11,\n      name: 'Alejandrino Dimount',\n      username: 'Alino',\n      email: 'Al.magg@dino.biz'\n    },\n    {\n      id: 12,\n      name: 'spaktron',\n      username: 'Spike',\n      email: 'Sp.eÃ±a@mas.info'\n    }\n  ];","import React from 'react'\n\n\nconst SearchBox = ({ searchfielf, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search Robots' \n            onChange= {searchChange}\n            />\n        </div>\n    );\n}\nexport default SearchBox\n","import React from 'react';\n\n\nconst Scroll = (props) => {\n return (\n    <div style= {{overflowY: 'scroll', border:'5px solid black', height: '800px'}}>\n        {props.children}\n    </div>   \n )\n};\n\n\n\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport { robots } from '../components/robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll'\n\nclass App extends Component {\n    constructor() {\n        super()             //llama al constructor\n        this.state = {\n            robots: robots,   //ahora robots es parte del objeto, de la propiedad state\n            searchfield: '',\n        }\n    }\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n    \n    render () {\n        const { robots, searchfield } = this.state;   \n        const filteredRobots= robots.filter(robot=> {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n       return !robots.length \n        ?  <h1> Cargando ... </h1> \n        : (<div className='tc'>\n                     <h1 style= {{color: 'black'}}>RoboFriends</h1>\n                     <SearchBox searchChange={this.onSearchChange}/>\n                     <Scroll>\n                        <CardList robots={filteredRobots}/>   \n                     </Scroll>\n          </div>);\n      }   \n }\n\nexport default App;\n\n\n    \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './conteiners/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}